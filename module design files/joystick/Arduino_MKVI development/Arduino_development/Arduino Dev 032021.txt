/**********************************************************************************************************************************
*
* DSAA POWER-ASSIST - MK VI SOFTWARE  ************** ARDUINO DEVELOPMENT BUILD MAR 2021 ****************************************
*
* BY:			SW developer:     Steve Alvey 403-870-7210 (C)
*
* VERSION:		POWER-ASSIST MK VI - 2021 DEVELOPMENT  
*				Compatible with Mk VI Arduino PCB (2021)
*
* PURPOSE:		The POWER-ASSIST System provides control of various 12V DC servo motors intended to
*				control sails and steering systems (helm) of small sailboats.  Sailors with limited
*				hand function may control the Autohelm System via a wheelchair style joystick, a 
*				Sip & Puff module or an RF keyfob or RC Remote Control. See www.martin16.com / POWER ASSIST SYSTEM 
*				for pictures and Autohelm System Operator Manual.
*
* LAST CHANGED: 		3/20/2021 S ALVEY - commenced conversion to Arduino ATMega328 PIC
*					
*				Outstanding issues:
*					
*
* SPECIAL NOTES:		A) This software is based upon original code developed for Autohelm Mk IV
*
***********************************************************************************************************************************/

//#include <16c74b.h>
//#fuses HS,WDT,NOPROTECT,PUT,NOBROWNOUT
//#use delay(clock=16000000, restart_wdt)
#include <pinsArduino.txt> 	// defines descriptive names for PIC pin numbers

/*******************
* LESKIW - defines *
*******************/
enum {
	BLINK_TIMER,		// mode lamp timer  (1 hz rate (10 + 10 ticks))
	HEARTBEAT_TIMER, 	// Controls how the flashing works
	NO_RC_PULSE_TIMER,	// IF RC PULSE NOT RECEIVED WITHIN "X" MSECS, RESETS RC PARAMETERS TO NEUTRAL
	ACK_TIMER,
	BATTERY_TEST_TIMER, 	// BATTERY CONDITION IS CHECKED EVERY TEN SECONDS
	low_battery_timer,	// WHEN BATTERY REACHES CRITICAL LEVEL, THIS TIMER INTEGRATES CONDITION FOR 3 MINUTES
	NUM_TIMERS    		// this must be the last in the list
};

//how to do PWM in Arduino?

//#BYTE	TMR0	= 0X01		// DEFINE TIMER0 REGISTER (DIRECT ACCESS)
//#BYTE 	OPTION 	= 0X81 		// Port B Option register (for setting port B pullup option)
//#BYTE 	INTCON 	= 0X8B 		// Interrupt control register (used to force Interrupt mask set-up)

//#BYTE	PR2 	= 0X92		// DEFINE PWM CONTROL REGISTERS (DIRECT ACCESS)
//#BYTE	CCPR1L 	= 0X15
//#BYTE 	CCPR2L 	= 0X1B
//#BYTE	TMR2 	= 0X11
//#BYTE	T2CON 	= 0X12
//#BYTE 	CCP1CON = 0X17
//#BYTE 	CCP2CON = 0X1D

/**********************
* Function Prototypes *		// ALVEY - THESE ALLOW SUBROUTINE CODE SEGMENTS TO BE RECOGNIZED WHEREVER THEY ARE IN FILE
**********************/
void allOff(void);
void RCOff(void);
void initialize(void);
char checkInputs(void);
void handleInputCommand(void);
void check_battery_level(void);
void beep(char numBeeps);
void ledsOff(void);
void checkJoy(void);
void checkSP (void)
void checkRC(void);
void rudstbd(void);
void rudPort(void);
void winchIn(void);
void winchOut(void);
void handleBeeps(void);

/*******************
* LESKIW - globals *
*******************/

signed int J_REF;				// joystick reference value, read from A/D input pin AREF (21)
signed int JOY_RL_LIMIT = 20;			// joystick RL dead band
signed int JOY_UD_LIMIT = 30;			// joystick UD dead band

signed int SP_REF;				// Sip & Puff sensor reference value, read from A/D input pin AREF (21)
signed int SP_RL_LIMIT = 20;			// Sip & Puff sensor RL dead band
signed int SP_UD_LIMIT = 30;			// Sip & Puff sensor UD dead band

signed long RC_NEUTRAL = 117;			// RC reference value, equivalent to 1.5msec pulsewidth (calc = 117)
signed long max_pulse_length = 156;		// longest valid pulse length is 2.0 msec (approx 156 Timer0 ticks)
signed long min_pulse_length = 78;		// shortest valid pulse length is 1.0 msec (approx 78 Timer0 ticks)
signed long RC_RL;
signed long RC_UD;

char INPUT_FLAGS 	= 0;			// various control flags
#BIT BEEP_SENSE 	= INPUT_FLAGS.3		// 1 = identifies that sound is on

char RC_FLAGS = 0;
#BIT RC_input_received 	= RC_FLAGS.0		// 1 = one (or more) RC input pulse measured to be handled in MAIN
#BIT bad_RC1_pulse 	= RC_FLAGS.1
#BIT bad_RC2_pulse 	= RC_FLAGS.2


char global_flags = 0;				// used to store global boolean values
#BIT watchDogAlarm = global_flags.0		// if set, the main software is stuck in a loop
#BIT use_pwm_ramp = global_flags.5 		// IF SET, means accelerate PWM to full speed using a ramp
#BIT beepPriority = global_flags.6 		// IF SET, beep() will ignore new beeps until the current set is done
#BIT timer1_overflow = global_flags.7 		// IF SET, RC2 pulse boundary condition; ignore current pulse timing

char JOY_POS 		= 0;			// contains joystick position flags
#BIT JUP 		= JOY_POS.0		// 
#BIT JDOWN 		= JOY_POS.1		//
#BIT JRIGHT 		= JOY_POS.2		//
#BIT JLEFT 		= JOY_POS.3		//

char SP_POS 		= 0;			// contains Sip & Puff position flags
#BIT SPUP 		= SP_POS.0		// 
#BIT SPDOWN 		= SP_POS.1		//
#BIT SPRIGHT 		= SP_POS.2		//
#BIT SPLEFT 		= SP_POS.3		//

int debug = 0;					// holds debug flag, to control location of debug "beeps" in code
char debounce = 0;				// holds debounce flag for debug routine "button" presses

char NUM_BEEPS = 0;				// holds number of times to beep
char BEEP_TIMER = 0;				// time between beeps

int timerList[NUM_TIMERS];			// define timer list


/****************************************
* INITIALIZE BATTERY METER FUNCTION 	*
****************************************/
char battery_level = 5; 			// initialize battery to be full, EF
char read_battery = 1; 				// initialize to not read the battery level, EF
char battery_too_low = 0; 			// initialize to battery is fine, EF
char beep_flag = 0; 				// beep when battery level is low, EF


/**********************************************
* MAIN initialization routine (MAIN LOOP)     *
**********************************************/
void initialize(void)
{
	int i;

	disable_interrupts(global);			// disable interrupts during initialization

//	set_tris_a(0x1f);  				// MK IV hardware					>>>>>>revise for Arduino hardware
//	set_tris_b(0xc5);   				// ALLOW RC INPUTS ON PIN 33 AND 40
//	set_tris_c(0x80);		
//	set_tris_d(0xf3);		 
//	set_tris_e(0x06);

	allOff();					// TURN ALL OUTPUTS OFF
	LEDSoFF();					// TURN ALL LEDS OFF

	output_high(BUZZER);				// TEST BUZZER

							// LED TEST SEQUENCE
	output_high(WINDLASS_LMP);
	delay_ms(200);

	output_high(BAT_LOW_LED);
	output_low(WINDLASS_LMP);
	delay_ms(200);

	output_low(BAT_LOW_LED);
	output_high(WINCH_LED);		
	output_high(WINDLASS_LMP);
	delay_ms(200);

	output_low(WINCH_LED);		
	output_high(HELM_LED);
	output_low(WINDLASS_LMP);
	delay_ms(200);

	output_low(HELM_LED);
	output_high(HEARTBEAT_LED);	
	output_high(WINDLASS_LMP);
	delay_ms(500);

	output_low(HEARTBEAT_LED);	
	output_low(WINDLASS_LMP);

	output_low(BUZZER);				// end LED test

	for(i = 0; i < NUM_TIMERS; i++)
		timerList[i] = 0;

	setup_timer_0(RTCC_INTERNAL|RTCC_DIV_64);	// COMPILER DOES NOT SEEM TO WORK; BELOW IS DIRECT REGISTER SET-UP OF TIMER 0

//	OPTION = 0XC5;					// timer0 is loaded on RC1 pulse edge and used to time RC pulses (as a simple counter)
							// INTERNAL SOURCE, PRESCALE = 64; NO PORTB PULL-UPS
	disable_interrupts(int_timer0);			// we do NOT want timer0 interrupts to be generated

	setup_timer_1(T1_INTERNAL|T1_DIV_BY_4); 	/* timer1 is primary real time clock; interrupts every 52 msec */
	enable_interrupts(INT_TIMER1);			// timer1 is also used in relative mode to time RC pulsewidths

	ext_int_edge(L_to_H);				// SET RB0 INTERUPT TO TRIGGER ON RC1 RECEIVER INPUT 
	enable_interrupts(INT_EXT); 			// interupt EXT is used to synchronize with rising edge of RC1 pulse
	enable_interrupts(INT_RB); 			// interupt RB is used to synchronize with rising edge of RC2 pulse
							// **** interupts are enabled alternately, so that each pulse gets exclusive use of Timer0

	PR2 = 0XFF;				// SET TMR2 COMPARE VALUE TO "255" STEPS (max PWM resolution)
	CCPR1L = 0;				// INITIALIZE PWM1 PULSE WIDTH TO 0
	CCPR2L = 0;				// INITIALIZE PWM2 PULSE WIDTH TO 0
	TMR2 = 0X10;				// INITIALIZE PWM FREQUENCY AT 20 KHZ (20 MHZ / 4/ 256)
	T2CON = T2CON | 0X04;			// TURN ON PWM2 CONTROL REGISTER, WITH NO PRE/POST SCALE VALUES

	setup_adc(ADC_CLOCK_DIV_8);
	setup_adc_ports(PC0_PC1_PC2_PC3_PC4_ANALOG);	// SET UP A/D PORTS FOR JOYSTICK AND BATTERY METER
	set_adc_channel(3);
	delay_ms(100);
	J_REF = read_adc();			// SET JOYSTICK REFERENCE VALUE (ONCE, AT POWER-UP)

	enable_interrupts(global);		// enable all defined interrupts

//	INTCON = 0XD8;				// enable external and Port B interrupts (forced)
}


/***************************
* check inputs (MAIN LOOP) *			//CHECK FOR JOYSTICK, RC, SIP & PUFF INPUT COMMAND
***************************/

char checkInputs(void)
{
	char retVal = 0;
	char temp;
	#BIT temp0 = temp.0
	#BIT temp1 = temp.1


	/*******************************************
	* CHECK JOYSTICK COMMAND RECEIVED	   *	// PRIORITY ONE INPUT
	*******************************************/
	if (!retVal) 			
	{
		checkJoy();
		if (JOY_POS)
			return 1;			// IF RC SCREWS UP, WILL ALWAYS GIVE PRIORITY TO JOYSTICK INPUT
	}


	/************************************
	* CHECK RC COMMAND RECEIVED	    *		// PRIORITY TWO INPUT
	************************************/
	if (!retVal) 
	{
		checkRC();
		if (JOY_POS)
			return 1;			// if RC input present, retVal = 1
	}	

	/*************************************
	* check Sip & Puff COMMAND RECEIVED  * 		// PRIORITY THREE INPUT
	*************************************/

	if (!retVal) 
	{
		checkSP();
		if (JOY_POS)
			return 1;			// if SP input present, retVal = 1
	}
	return retVal;
}

/**************************
* LESKIW - check joystick *				//READ JOYSTICK DEFLECTION AND STORE DIRECTION AND ABSOLUTE VALUE
**************************/
void checkJoy(void)
{
	int sampleUDVal;		  
	int sampleRLVal;
	signed int joy_UD = 0;
	signed int joy_RL = 0;

	JOY_POS =0;
	{
		set_adc_channel(1);
		delay_ms(20);
		sampleRLVal = read_adc();		// READ THE JOYSTICK RL VALUE 
		joy_RL = (signed int) J_REF - (signed int) sampleRLVal;

		if (joy_RL > JOY_RL_LIMIT)		// if deflection is greater than 'RL deadband', set JOY flag
		{
			JRIGHT = 1;
		}
		else if (joy_RL < -(JOY_RL_LIMIT))
		{
			JLEFT = 1;
		}
	}
	if(!JOY_POS)			
	{
		set_adc_channel(0);
		delay_ms(20);
		sampleUDVal = read_adc();		// READ THE JOYSTICK UD VALUE 
		joy_UD = (signed int) J_REF - (signed int) sampleUDVal;

		if (joy_UD > JOY_UD_LIMIT)		// if deflection is greater than 'UD deadband', set JOY flag
		{
			JDOWN = 1;
		}
		else if (joy_UD < -(JOY_UD_LIMIT))
		{
			JUP = 1;
		}
	}

}

/****************************
* LESKIW - check Sip & Puff *
****************************/
void checkSP(void)
{
	int sampleSP2Val;		  
	int sampleSP1Val;
	signed int joy_UD = 0;
	signed int joy_RL = 0;

	JOY_POS =0;
	{
		set_adc_channel(3);
		delay_ms(20);
		sampleSP1Val = read_adc();		// READ THE SIP & PUFF RL VALUE 
		joy_RL = (signed int) J_REF - (signed int) sampleSP1Val;

		if (joy_RL > JOY_RL_LIMIT)		// if deflection is greater than 'RL deadband', set JOY flag
		{
			JRIGHT = 1;
		}
		else if (joy_RL < -(JOY_RL_LIMIT))
		{
			JLEFT = 1;
		}
	}
	if(!JOY_POS)			
	{
		set_adc_channel(2);
		delay_ms(20);
		sampleSP2Val = read_adc();		 // READ THE SIP & PUFF UD VALUE 
		joy_UD = (signed int) J_REF - (signed int) sampleSP2Val;

		if (joy_UD > JOY_UD_LIMIT)		// if deflection is greater than 'UD deadband', set JOY flag
		{
			JDOWN = 1;
		}
		else if (joy_UD < -(JOY_UD_LIMIT))
		{
			JUP = 1;
		}
	}
}

/****************************************		Program uses Timer0 to time RC1 or RC2 pulses 
* 			 		*		Program "waits" in this routine during timing of either pulse
*  ALVEY - check RC INPUTS (MAIN)	*		in order to provide timing as accurately as possible
*					*		
****************************************/		

void checkRC(void)
{
	JOY_POS =0;

	if (timerList[NO_RC_PULSE_TIMER] == 0)
	{
		RCOff();				// if there are no RC pulses, then RC must be turned off or out of range 
		return; 				// reset RC offset values and return to calling program
	}
	if (bad_RC1_pulse)
	{	
		bad_RC1_pulse = 0;
	}
	else
	{
		if (RC_RL > JOY_RL_LIMIT)		// if deflection is greater than 'RL deadband', set JOY flag
		{
			JRIGHT = 1;
		}
		else if (RC_RL < -(JOY_RL_LIMIT))
		{
			JLEFT = 1;
		}
	}

	if(!JOY_POS)					// if no RL input, then check for UD input
	{
	if (bad_RC2_pulse)	
	{
		bad_RC2_pulse = 0;
	}
	else
	{
		if (RC_UD > JOY_UD_LIMIT)		// if deflection is greater than 'UD deadband', set JOY flag
		{
			JUP = 1;
		}
		else if (RC_UD < -(JOY_UD_LIMIT))
		{
			JDOWN = 1;
		}
	}
}

/***********************************
* handle input command (MAIN LOOP) *
***********************************/

void handleInputCommand()
{
	if( timerList[ACK_TIMER] == 0)		// IF INPUT COMMAND PRESENT, BEEP ONCE
	{
		beep(1);
		timerList[ACK_TIMER] = 20;
	}

	if(JRIGHT | JLEFT)			// ACTIVATE HELM LEFT/RIGHT
	{
		if(JRIGHT)
			rudStbd();
		else
			rudPort();
	}
	
	else if(JUP | JDOWN)			// ACTIVATE WINDLASS UP/DOWN
	{
		if(JUP)
			winchOut();
		else
			winchIn();
	}
	joy_pos = 0;				// acknowledge that input command has been handled
}


/************************************************
*						*
* OUTPUT CONTROL ROUTINES (MAIN LOOP) 		*
*					    	*
************************************************/

/*****************************
* rudder to port (MAIN LOOP) *			(032021  revise for Arduino PWM)
*****************************/
void rudPort(void)
{					
	if (CCPR2L < 223)
	{
		CCPR2L = CCPR2L + 32;	// either 1) "ramp" PWM
	}
	else
	{
		CCPR2L = 255;		// or 2) go full-speed...
	}
	output_high(PWM1_DIRECTION);
	delay_us(50);
	output_high(PWM1);			
}

/*****************************
* rudder to stbd (MAIN LOOP) *			(032021  revise for Arduino PWM)
*****************************/
void rudstbd(void)
{
	if (CCPR2L < 223)
	{
		CCPR2L = CCPR2L + 32;	// either 1) "ramp" PWM
	}
	else
	{
		CCPR2L = 255;		// or 2) go full-speed...
	}
	output_low(PWM1_DIRECTION);
	delay_us(50);
	output_high(PWM1);		
}

/***********************
* winch in (MAIN LOOP) *
***********************/
void winchIn(void)
{
	output_high(WINCH_IN);
}

/************************
* winch out (MAIN LOOP) *
************************/
void winchOut(void)
{
	output_high(WINCH_OUT);
}


/***************************************
* ALVEY - turn RC off (MULTIPLE CALLS) *	// ALVEY - IF RC PULSES ARE "LOST" FOR MORE THAN 100 MSEC, TURN RC OFF
***************************************/
void RCOff(void)
{
	RC_UD = 0;				// reset (Up Down) PWM value to Neutral
	RC_RL = 0;				// reset (Right Left) PWM value to Neutral
}

/*****************************************
* LESKIW - turn all off (MULTIPLE CALLS) *	// ALVEY - BEFORE HANDLING ANY NEW INPUT, TURN "ALL OUTPUTS OFF"
*****************************************/
void allOff(void)
{
//	JOY_POS = 0;				// 2/9/05  SHOULD NOT CLEAR JOY_POS HERE ... ?

	output_low(PWM1);
	output_low(WINCH_IN);	
	output_low(WINCH_OUT);


	CCPR1L = 0;
	CCPR2L = 0;				// PWM OFFSET COUNTERS ARE SET TO "0" (032021 change for Arduino PWM)

	timerList[ACK_TIMER] = 0;
}

/************************************
* ALVEY - LEDS OFF (MULTIPLE CALLS) *
************************************/
void ledsOff(void)
{
	output_low(HEARTBEAT_LED);
	output_low(HELM_LED);
	output_low(WINCH_LED);
	output_low(BAT_LOW_LED);
}

/**********************************
* Check Battery level (MAIN LOOP) *	// CHECK BATTERY LEVEL AND SET FLAGS FOR BATTERY LOW LED
**********************************/
void check_battery_level(void)
{
	char bat_volt;
	int low_battery_integrator = 0;
	
	setup_adc_ports(PC4);			// set up A/D to read value (032021 not sure if this is correct...)
	set_adc_channel(4);			
	delay_ms(20);
	bat_volt = read_adc();
	setup_adc_ports(PC0_PC1_PC2_PC3_PC4); 		// reset the A/D ports

	if(bat_volt >= 190)			
	{
		battery_level = 5; 			// battery volatge > 12.0V
		output_low(BAT_LOW_LED);		// turn OFF battery low LED
		battery_too_low = 0; 			// battery is fine
		timerList[low_battery_timer] = 20;
		low_battery_integrator = 0;
	}
	
	else 						// battery voltage < 12.0V, VERIFY EVERY MINUTE FOR THREE MINUTES
	{
		output_high(BAT_LOW_LED);		// turn ON battery low LED
		if (timerList[low_battery_timer] == 0)
		{
			low_battery_integrator ++;
			timerList[low_battery_timer] = 20;
		}
		if (low_battery_integrator > 3)
		{
			battery_level = 1; 		// BATTERY TOO LOW - GO TO "SLEEP" MODE: DISALLOW OUTPUTS AND "BEEP"
			battery_too_low = 1; 		// set flag to go to SLEEP MODE (should = 1; temporarily disabled)
		}
	}
}

/*********************************
* LESKIW - beeps (MULTIPLE CALLS)*	// ACTIVATES BUZZER FOR SET PERIOD (REPEAT FOR "NUMBEEPS")
*********************************/
void beep(char numBeeps)
{
	if(beepPriority)
		return;
	
	BEEP_SENSE = 0;
	output_low(BUZZER);
	BEEP_TIMER = 0;
	NUM_BEEPS = 2 * numBeeps;
}

/****************************************
* RRRRR    CCCC   1  I N     N  TTTTTTT * THIS INTERUPT SYNCHRONIZES WITH RISING EDGE OF THE
* R    R  C    C  1  I N     N     T    * RC1 PULSE, AND MEASURES WIDTH FROM 1.0 - 2.0 MSECS
* R    R  C       1  I N N   N     T    *	
* RRRRR   C       1  I N  N  N     T    * TIMER1 IS USED IN RELATIVE MODE TO TIME PULSES 
* R  R    C       1  I N   N N     T    *   
* R   R   C    C  1  I N    NN     T    * TWO TIMER1 READINGS ARE TRANSLATED TO A PWM VALUE AND A DIRECTION
* R    R   CCCC   1  I N     N     T    * NOTE THAT INT_EXT AND INT_RB ARE ENABLED ALTERNATELY, SO THAT EACH ROUTINE GETS TO USE TIMER0
****************************************/

#int_ext
void timeRC1pulse(void)
{
	signed long RC1_stop = 0;				// MUST INITIALIZE RC1_STOP TO 0

//	disable_interrupts(int_ext);
//	disable_interrupts(int_rb);

	set_timer0(0);						// reset Timer0 to start pulse timing count
	timerList[NO_RC_PULSE_TIMER] = 2;			// reset NO_RC_PULSE_TIMER to 100 msec
	delay_us(100);						// debounce RC1 pulse START

	while (input(RC1_INPUT))				// debounce, and stay here for 1 - 2 msec to time RC1 pulse
	{
		restart_wdt();
		RC1_stop = get_timer0();		
		if (RC1_stop > max_pulse_length)
		{
			bad_RC1_pulse = 1;			// validate pulse length to be < 2.0 msec
			beep(1);				// BEEP if bad pulse detected
			break; 
		}
	}
	if (RC1_stop < min_pulse_length) 
	{
		bad_RC1_pulse = 1;				// validate pulse length to be > 1.0 msec
		beep(1);					// BEEP if bad pulse detected
	}
	else
	{
		RC_RL = ((signed long) RC_NEUTRAL - RC1_stop);	// calculate RC1 offset time and return
		RC_RL <<=1;					// amplify RC_RL by factor of 2 (same scale as joystick)
	}
//	enable_interrupts(int_rb);
}



/*********************************************
* RRRRR    CCCC    2222   I N     N  TTTTTTT * THIS INTERUPT SYNCHRONIZES WITH RISING EDGE OF 
* R    R  C    C  2    2  I N     N     T    * THE RC2 PULSE, AND MEASURES WIDTH FROM 1.0 - 2.0 MSECS
* R    R  C           2   I N N   N     T    *	
* RRRRR   C          2    I N  N  N     T    * TIMER1 IS USED IN RELATIVE MODE TO TIME PULSES 
* R  R    C         2     I N   N N     T    *   
* R   R   C    C   2      I N    NN     T    * TWO TIMER1 READINGS ARE TRANSLATED TO A PWM VALUE AND A DIRECTION
* R    R   CCCC   222222  I N     N     T    * NOTE THAT INT_EXT AND INT_RB ARE ENABLED ALTERNATELY, SO THAT EACH ROUTINE GETS TO USE TIMER0	
*********************************************/

#int_rb								// 01/07/05 this interrupt WORKS...
void timeRC2pulse(void)
{
	signed long RC2_stop = 0;				// MUST INITIALIZE RC2_STOP TO 0

//	disable_interrupts(int_ext);
//	disable_interrupts(int_rb);

	set_timer0(0);						// reset Timer0 to start pulse timing count
	timerList[NO_RC_PULSE_TIMER] = 2;			// reset NO_RC_PULSE_TIMER to 100 msec
	delay_us(100);						// debounce RC2 pulse START

	while (input(RC2_INPUT))				// debounce, and stay here for 1 - 2 msec to time RC2 pulse
	{
		restart_wdt();
		RC2_stop = get_timer0();			
		if (RC2_stop > max_pulse_length)
		{
			bad_RC2_pulse = 1;			// validate pulse length to be < 2.0 msec
			beep(1);				// BEEP if bad pulse detected
			break; 
		}
	}
	if (RC2_stop < min_pulse_length) 
	{
		bad_RC2_pulse = 1;				// validate pulse length to be > 1.0 msec
		beep(1);					// BEEP if bad pulse detected
	}
	else
	{
		RC_UD = ((signed long) RC_NEUTRAL - RC2_stop);	// calculate RC2 offset time and return
		RC_UD <<=1;					// amplify RC_UD by factor of 2 (same scale as joystick)
	}
//	enable_interrupts(int_ext);
}


/****************************************************************
* TTTTTTT I M           M EEEEEE  RRRRR   1  I N     N  TTTTTTT *	TEN REAL-TIME TIMERS ARE MANAGED HERE
*    T    I MM         MM E       R    R  1  I NN    N     T    *	TIMERS ARE INDEXED AND STATE FLAGS SET 
*    T    I M M       M M E       R    R  1  I N N   N     T    *	THAT CONTROL ACTIONS IN MAIN PROGRAM LOOP
*    T    I M  M     M  M EEEEE   RRRRR   1  I N  N  N     T    *	
*    T    I M   M   M   M E       R  R    1  I N   N N     T    *	ALL LED FLASHING CONTROLLED HERE
*    T    I M    M M    M E       R   R   1  I N    NN     T    *	ALL BEEPS CONTROLLED HERE
*    T    I M     M     M EEEEEEA R    R  1  I N     N     T    *	BATTERY METER INDICATOR CONTROLLED HERE
****************************************************************/


// ************************** CHECK AND UPDATE/RESET ALL TIMERS **********

#int_timer1
void timer1Int(void)
{
	int i;
	char temp;
	timer1_overflow = 1;		// (not used) this flag is set to avoid boundary conditions for RC2 pulse width timing in MAIN

	for(i = 0; i < NUM_TIMERS; i++)
	{
		if (timerList[i] != 0)
		{
			timerList[i]--;
		}
	}
	/*********************************
	* SET FLAG TO READ BATTERY LEVEL *
	*********************************/

	if(timerList[BATTERY_TEST_TIMER] == 0)		
	{
		timerList[BATTERY_TEST_TIMER] = 200; 	// ALVEY - Read battery every 10 seconds (20 TICKS PER SECOND)
		read_battery = 1; 			// set flag to read battery
	}

	/******************************
	* WINDLASS LAMP FLASH ROUTINE *		 
	******************************/
	
	{
		if (timerList[BLINK_TIMER] > 10)	// FLASH WINDLASS LED AT 1 HZ RATE
			output_high(WINDLASS_LMP);
		else 
			output_low(WINDLASS_LMP);
		
		if (timerList[BLINK_TIMER] == 0)
			timerList[BLINK_TIMER] = 20;
	}
	handlebeeps();					// activate Beeps as set by state flags
}


/***********************************
* LESKIW - handle beeps (TIMER1INT)*
***********************************/
void handleBeeps(void)
{
	if (NUM_BEEPS)
	{
		if(BEEP_TIMER)
			BEEP_TIMER = BEEP_TIMER - 1;
		else
		{
			if (BEEP_SENSE)
			{
				output_low(BUZZER);
				BEEP_SENSE = 0;
			}
			else
			{
				output_high(BUZZER);
				BEEP_SENSE = 1;
			}
			BEEP_TIMER = 2;
			NUM_BEEPS--;
			if(NUM_BEEPS ==0)
			{
				beepPriority = FALSE;
			}
		}
	}
}

// ************************** END OF TIMER1 INTERRUPT ROUTINE **********



/***********************************************
*    M           M       A       I N     N     *	MAIN PROGRAM LOOP ROUTINES
*    MM         MM      A A      I NN    N     *	  INITIALIZATION (ONE TIME ON POWER UP)
*    M M       M M     A   A     I N N   N     *	  READ ALL INPUTS AND ACTIVATE VARIOUS OUTPUT COMMANDS
*    M  M     M  M    A     A    I N  N  N     *	  SET STATE FLAGS FOR FLASH AND BEEPS IN TIMER1INT
*    M   M   M   M   AAAAAAAAA   I N   N N     *	  
*    M    M M    M  A         A  I N    NN     *	  TEST FOR BATTERY VOLTAGE TOO LOW; GO TO SLEEP MODE	
*    M     M     M A           A I N     N     *	  FLASH AND BEEP ROUTINE STATE FLAGS ??
***********************************************/

void main(void)
// ********************************** INITIALIZE SYSTEM **************************************
{
	char temp;				

	global_flags = 0;

	initialize();

// ********************************** MAIN PROGRAM LOOP ***************************************

	while(1)				
	{
		restart_wdt();
 							//moved READ_BATTERY function within FLASH routine...
		if(read_battery)			// read the current battery level every THREE seconds
		{
			read_battery = 0; 		// reset read_battery flag
			check_battery_level();		// call function to read battery level and update state
		}

		if ( checkInputs() )		// scan all inputs
			handleInputCommand();	// if present, handle input command
		else if (!KEY_DOWN)		// if no input present...
			allOff();		// ....turn all outputs OFF
	}
}						
// ***************************************** END OF MAIN PROGRAM LOOP *******************************


